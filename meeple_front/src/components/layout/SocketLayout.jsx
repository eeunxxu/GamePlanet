import React, { useCallback, useEffect, useRef, useState } from "react";
import SockJS from "sockjs-client";
import { Client } from "@stomp/stompjs";
import { useDispatch, useSelector } from "react-redux";
import { useLocation } from "react-router-dom";
import { body } from "framer-motion/client";

export const SocketContext = React.createContext();

const SocketLayout = ({ children }) => {
  const [connected, setConnected] = useState(false);
  const [error, setError] = useState(null);
  // ÎåÄÍ∏∞Î∞© Ï†ïÎ≥¥
  const [roomSocketData, setRoomSocketData] = useState(null);
  const [roomNotifi, setRoomNotifi] = useState("");
  // Ï±ÑÌåÖ
  const [chatMessage, setChatMessage] = useState(null);

  // Í≤åÏûÑ Ï†ïÎ≥¥
  const [gamePlaySocketData, setGamePlaySocketData] = useState(null);

  // ÏßÄÍ∏à ÌîåÎ†àÏù¥Ïñ¥Îäî ÎàÑÍµ∞ÏßÄ
  const [currentPlayerSocketIndex, setCurrentPlayerSocketIndex] =
    useState(null);

  // Ï£ºÏÇ¨ÏúÑ ÎçòÏßÄÎäîÏßÄ Ïïà ÎçòÏßÄÎäî ÏßÄ
  const [socketRoll, setSocektRoll] = useState(null);

  // Ï£ºÏÇ¨ÏúÑ Íµ¥Î¶∞ ÌõÑ Ï†ïÎ≥¥
  const [rollDiceSocketData, setRollDiceSocketData] = useState(null);

  //  Îã§Ïùå ÌñâÎèô
  const [socketNext, setSocketNext] = useState(null);

  // Ï≤´ Î≤àÏß∏ Ï£ºÏÇ¨ÏúÑ Í≤∞Í≥º
  const [socketFirstDice, setSocketFirstDice] = useState(null);

  // Îëê Î≤àÏß∏ Ï£ºÏÇ¨ÏúÑ Í≤∞Í≥º
  const [socketSecondDice, setSocketSecondDice] = useState(null);

  // Ï£ºÏÇ¨ÏúÑÍ∞Ä ÎçîÎ∏îÏù∏ÏßÄ ÏïÑÎãåÏßÄ
  const [socketDouble, setSocketDouble] = useState(null);

  // Î™á Î≤àÏß∏ ÎùºÏö¥ÎìúÏù∏ÏßÄ
  const [socketCurrentRound, setSocketCurrentRound] = useState(null);

  // Î≥¥Îìú Ï†ïÎ≥¥
  const [socketBoard, setSocketBoard] = useState(null);

  // Ïπ¥Îìú Ï†ïÎ≥¥
  const [socketCards, setSocketCards] = useState(null);

  // Í≤åÏûÑ Í≥µÏßÄ Î©îÏãúÏßÄ
  const [gameSocketNotifi, setGameSocketNotifi] = useState(null);

  // ÎïÖ Íµ¨Îß§ ÌõÑ Ï†ïÎ≥¥
  const [buyLandSocketData, setBuyLandSocketData] = useState(null);

  // Ïú†Ï†Ä ÏóÖÎç∞Ïù¥Ìä∏ Ï†ïÎ≥¥
  const [socketUserUpdate, setSocketUserUpdate] = useState(null);

  // ÌÉÄÏùº ÏóÖÎç∞Ïù¥Ìä∏ Ï†ïÎ≥¥
  const [socketTileUpdate, setSocketTileUpdate] = useState(null);

  // Í∏∞ÏßÄ Í±¥ÏÑ§ ÌõÑ Ï†ïÎ≥¥
  const [buildBaseSocketData, setBuildBaseSocketData] = useState(null);

  // ÌãÄÎ¶∞ ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†• Ïãú
  const [socketStatus, setSocketStatus] = useState(null);

  // ÏäπÏûê
  const [socketWinner, setSocketWinner] = useState(null);

  // ÌååÏÇ∞Ïûê
  const [socketRemovedPlayer, setSocketRemovedPlayer] = useState(null);

  // ÌÜµÌñâÎ£å ÏßÄÎ∂à ÌõÑ Îç∞Ïù¥ÌÑ∞
  const [socketPayTollData, setSocketPayTollData] = useState(null);

  // ÏßÄÎ∂àÌï¥Ïïº ÌïòÎäî ÌÜµÌñâÎ£å
  const [socketTollPrice, setSocketTollPrice] = useState(null);

  // ÎèàÏùÑ Î∞õÎäî ÏÇ¨Îûå
  const [socketReceivedPlayer, setSocketReceivedPlayer] = useState(null);

  // Ïò§ÌîàÎπÑÎëê
  const [socketBurumabulOpenVidu, setSocketBurumabulOpenVidu] = useState("");

  // Ïπ¥Îìú ÎΩëÏùÄ ÌõÑ
  const [socketDrawCardData, setSocketDrawCardData] = useState(null);

  // ÎΩëÏùÄ Ïπ¥Îìú
  const [socketPickedCard, setSocketPickedCard] = useState(null);

  // Ïπ¥Îìú ÎΩëÍ∏∞ Ï†Ñ ÏúÑÏπò
  const [socketDrawPrevPosition, setSocketDrawPrevPosition] = useState(null);

  // Ïπ¥Îìú ÎΩëÍ≥† ÎÇòÏÑú ÏúÑÏπò
  const [socketDrawNextPosition, setSocketDrawNextPosition] = useState(null);

  // Ïπ¥Îìú ÎΩëÍ∏∞ Ï†Ñ Îèà
  const [socketDrawPrevBalance, setSocketDrawPrevBalance] = useState(null);

  // Ïπ¥Îìú ÎΩëÍ∏∞ ÌõÑ Îèà
  const [socketDrawNextBalance, setSocketDrawNextBalance] = useState(null);

  // ÏãúÍ∞Ñ Ïó¨Ìñâ
  const [socketTravelData, setSocketTravelData] = useState(null);
  const [socketTravelPrevPosition, setSocketTravelPrevPosition] =
    useState(null);
  const [socketTravelNextPosition, setSocketTravelNextPosition] =
    useState(null);

  // Í≤åÏûÑ Ï¢ÖÎ£å
  const [socketEnd, setSocketEnd] = useState(null);

  // Ïª§Ïä§ÌÖÄ ÌÖåÎßà Î¶¨Ïä§Ìä∏
  const [socketCustomList, setSocketCustomList] = useState(null);

  const location = useLocation();

  const stompClientRef = useRef(null);

  const roomId = useSelector((state) => state.burumabul.roomId);
  const userId = useSelector((state) => state.user.userId);
  const rawToken = localStorage.getItem("token");
  const token = rawToken ? rawToken.trim() : "";

  useEffect(() => {
    if (!roomId) {
      console.warn("Î∞© IDÍ∞Ä ÏóÜÏäµÎãàÎã§.");
      return;
    }

    console.log("üåê STOMP Client ÏÉùÏÑ± Ï§ë...");
    const stompClient = new Client({
      webSocketFactory: () => {
        console.log("üåç SockJS WebSocket Ìå©ÌÜ†Î¶¨ Ïã§ÌñâÎê®!");
        // return new SockJS(`${import.meta.env.VITE_SOCKET_LOCAL_API_BASE_URL}`);
        return new SockJS(`${import.meta.env.VITE_SOCKET_API_BASE_URL}`);
      },
      reconnectDelay: 5000,
      heartbeatIncoming: 4000,
      heartbeatOutgoing: 4000,
      connectHeaders: {
        Authorization: `Bearer ${token}`,
      },
      debug: (str) => {
        console.log("üõ† STOMP Debug:", str); // Í∞ïÏ†ú ÎîîÎ≤ÑÍπÖ Ï∂úÎ†•
      },
    });

    stompClient.onConnect = (frame) => {
      console.log("Î∂ÄÎ£®ÎßàÎ∂à ÎåÄÍ∏∞Î∞© ÏõπÏÜåÏºì Ïó∞Í≤∞", frame);
      setConnected(true);

      if (roomId) {
        try {
          console.log("Íµ¨ÎèÖ ÏãúÎèÑ:", `/topic/rooms/${roomId}`);
          console.log("Î∂ÄÎ£®ÎßàÎ∂à Íµ¨ÎèÖ ÏãúÏûë");
          stompClient.subscribe(`/topic/rooms/${roomId}`, (message) => {
            console.log(
              "Î∂ÄÎ£®ÎßàÎ∂à ÏÜåÏºì ÏÑúÎ≤ÑÎ°úÎ∂ÄÌÑ∞ Î∞õÏùÄ Î©îÏãúÏßÄ : ",
              message.body
            );
            const receivedData = JSON.parse(message.body);
            console.log("Î∂ÄÎ£®ÎßàÎ∂à ÏÑúÎ≤ÑÎ°úÎ∂ÄÌÑ∞ Î∞õÏùÄ ÏùëÎãµ : ", receivedData);
            if (receivedData.type === "chat") {
              setChatMessage(receivedData);
            } else if (receivedData.type === "room") {
              setRoomSocketData(receivedData.roomResponse);
              setRoomNotifi(receivedData.message);
              setSocketCustomList(receivedData.customElementResponses);
            } else if (receivedData.type === "create") {
              setGamePlaySocketData(receivedData.data);
              setSocketBurumabulOpenVidu(String(receivedData.message)); // üí° Í∞ïÏ†ú Î≥ÄÌôò
              setSocketNext(receivedData.data.nextAction);
              setCurrentPlayerSocketIndex(receivedData.data.currentPlayerIndex);
              setSocketCurrentRound(receivedData.data.round);
              setSocketBoard(receivedData.data.board);
              setSocketCards(receivedData.data.cards);
            } else if (receivedData.type === "start-turn") {
              setGamePlaySocketData(receivedData.data);
              setGameSocketNotifi(receivedData.message);
              setSocketNext(receivedData.data.nextAction);
              setCurrentPlayerSocketIndex(receivedData.data.currentPlayerIndex);
              // setSocketDrawPrevPosition(null);
              // setSocketDrawNextPosition(null);
            } else if (receivedData.type === "buy-land") {
              setBuyLandSocketData(receivedData.buyLandResponse);
              setSocketUserUpdate(receivedData.buyLandResponse.updatedPlayer);
              setSocketTileUpdate(receivedData.buyLandResponse.updatedTile);
              setSocketNext(receivedData.buyLandResponse.nextAction);
              setGameSocketNotifi(receivedData.message);
            } else if (receivedData.type === "roll-dice") {
              setRollDiceSocketData(receivedData.diceRollResponse);
              setSocketFirstDice(receivedData.diceRollResponse.firstDice);
              setSocketSecondDice(receivedData.diceRollResponse.secondDice);
              setSocketDouble(receivedData.diceRollResponse.double);
              setSocketNext(receivedData.diceRollResponse.nextAction);
              setGameSocketNotifi(receivedData.message);
            } else if (receivedData.type === "just-roll-dice") {
              setSocektRoll(receivedData.data);
              setGameSocketNotifi(receivedData.message);
            } else if (receivedData.type === "build-base") {
              setBuildBaseSocketData(receivedData.data);
              setGameSocketNotifi(receivedData.message);
              setSocketNext(receivedData.data.nextAction);
            } else if (receivedData.type === "turn-end") {
              setCurrentPlayerSocketIndex(receivedData.data.currentPlayerIndex);
              setSocketNext(receivedData.data.nextAction);
              setSocketCurrentRound(receivedData.data.round);
              setGameSocketNotifi(receivedData.message);
              setSocketWinner(receivedData.data.winner);
            } else if (receivedData.type === "pay-fee") {
              setSocketPayTollData(receivedData.data);
              setSocketTollPrice(receivedData.data.tollprice);
              setSocketReceivedPlayer(receivedData.data.receivedPlayer);
              setGameSocketNotifi(receivedData.message);
              setSocketNext(receivedData.data.nextAction);
            } else if (receivedData.type === "draw-card") {
              setSocketDrawCardData(receivedData.data);
              setSocketPickedCard(receivedData.data.pickedCard);
              setSocketDrawPrevPosition(receivedData.data.prevPosition);
              setSocketDrawNextPosition(receivedData.data.nextPosition);
              setSocketDrawPrevBalance(receivedData.data.prevBalance);
              setSocketDrawNextBalance(receivedData.data.nextBalance);
              setGameSocketNotifi(receivedData.message);
              setSocketNext(receivedData.data.nextAction);
            } else if (receivedData.type === "choose-position") {
              setSocketTravelData(receivedData.data);
              setSocketTravelPrevPosition(receivedData.data.prevPosition);
              setSocketTravelNextPosition(receivedData.data.nextPosition);
              setGameSocketNotifi(receivedData.message);
              setSocketNext(receivedData.data.nextAction);
            } else if (receivedData.type === "game-end") {
              setGameSocketNotifi(receivedData.message);
              setSocketEnd(receivedData.data);
            }
            if (receivedData.status) {
              setSocketStatus(receivedData.status);
            }
            console.log("Íµ¨ÎèÖ ÏÑ±Í≥µ:");
          });
        } catch (error) {
          console.error("Î∂ÄÎ£®ÎßàÎ∂à ÎåÄÍ∏∞Î∞© Íµ¨ÎèÖ Ï§ë Ïò§Î•ò Î∞úÏÉù", error);
        }
      }
    };

    stompClient.onDisconnect = () => {
      console.warn("‚ùå WebSocket Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥Ï°åÏäµÎãàÎã§!");
    };
    stompClient.onWebSocketError = (error) => {
      console.error("WebSocket Error:", error);
    };

    stompClient.onUnhandledMessage = (message) => {
      console.log("Unhandled Message:", message);
    };

    stompClient.onStompError = (frame) => {
      console.error("WebSocket Error", frame.headers["message"]);
      setError(`WebSocket Ïó∞Í≤∞ Ï§ë Ïò§Î•ò Î∞úÏÉù: ${frame.headers["message"]}`);
      setConnected(false);
    };
    stompClient.activate();
    stompClientRef.current = stompClient;

    return () => {
      if (stompClientRef.current && stompClientRef.current.connected) {
        stompClientRef.current.deactivate();
        stompClientRef.current = null;
        setConnected(false);
      }
    };
  }, [roomId]);

  // ÎåÄÍ∏∞Î∞© ÏûÖÏû•
  const enterWaitingRoom = useCallback(() => {
    if (!stompClientRef.current?.connected) {
      console.warn("ÏõπÏÜåÏºìÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
      return;
    }

    try {
      stompClientRef.current.publish({
        destination: `/app/game/blue-marble/rooms/${roomId}/user/${userId}/join`,
      });
      console.log(userId);
      console.log("Í≤åÏûÑ ÎåÄÍ∏∞Î∞©Ïóê Ï∞∏Í∞Ä ÏöîÏ≤≠");
    } catch (error) {
      console.error("Í≤åÏûÑ ÎåÄÍ∏∞Î∞©Ïóê Ï∞∏Í∞ÄÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
      setError("Í≤åÏûÑ ÎåÄÍ∏∞Î∞©Ïóê Ï∞∏Í∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ");
    }
  }, [roomId, userId]);

  // ÎåÄÍ∏∞Î∞© Ï±ÑÌåÖ
  const chatWaitingRoom = useCallback(
    (message) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/rooms/${roomId}/sendMessage`,
          body: JSON.stringify(message), // Ïù¥ÎØ∏ JSON.stringifyÎêú Î©îÏãúÏßÄ
          headers: {
            "content-type": "application/json;charset=UTF-8",
          },
        });
        console.log("Í≤åÏûÑ ÎåÄÍ∏∞Î∞©Ïóê Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ°");
      } catch (error) {
        console.error("Í≤åÏûÑ ÎåÄÍ∏∞Î∞©Ïóê Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ïã§Ìå®");
        setError("Í≤åÏûÑ ÎåÄÍ∏∞Î∞©Ïóê Ï±ÑÌåÖ Î©îÏãúÏßÄ Ï†ÑÏÜ° Ï§ë Ïò§Î•ò Î∞úÏÉù");
      }
    },
    [roomId]
  );

  // ÎπÑÎ∞Ä ÎåÄÍ∏∞Î∞© Ï∞∏Í∞Ä
  const enterSecretWaitingRoom = useCallback(
    (password) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/rooms/${roomId}/user/${userId}/private-room-join`,
          body: JSON.stringify({ password }),
        });
        console.log("ÎπÑÎ∞Ä ÎåÄÍ∏∞Î∞©Ïóê Ï∞∏Í∞Ä ÏöîÏ≤≠");
      } catch (error) {
        console.error("ÎπÑÎ∞Ä ÎåÄÍ∏∞Î∞©Ïóê Ï∞∏Í∞ÄÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§.");
        setError("ÎπÑÎ∞Ä ÎåÄÍ∏∞Î∞©Ïóê Ï∞∏Í∞Ä Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ");
      }
    },
    [roomId, userId]
  );

  // ÎåÄÍ∏∞Î∞© ÏóÖÎç∞Ïù¥Ìä∏
  const updateWaitingRoom = useCallback(
    (roomData) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/rooms/${roomId}/update`,
          body: JSON.stringify(roomData),
        });
      } catch (error) {
        console.error("ÎåÄÍ∏∞Î∞© ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        setError("ÎåÄÍ∏∞Î∞© ÏóÖÎç∞Ïù¥Ìä∏ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. ");
      }
    },
    [roomId]
  );

  // ÎåÄÍ∏∞Î∞© ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω
  const changePassword = useCallback(
    (password) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/rooms/${roomId}/changePassword`,
          body: JSON.stringify({ password }),
        });
      } catch (error) {
        console.error("ÎåÄÍ∏∞Î∞© ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
        setError("ÎåÄÍ∏∞Î∞© ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.");
      }
    },
    [roomId, userId]
  );

  // ÎåÄÍ∏∞Î∞© ÎÇòÍ∞ÄÍ∏∞
  const leaveGame = useCallback(() => {
    if (!stompClientRef.current?.connected) {
      console.warn("ÏõπÏÜåÏºìÏù¥ Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
      return;
    }
    try {
      stompClientRef.current.publish({
        destination: `/app/game/blue-marble/rooms/${roomId}/user/${userId}/delete`,
      });
      console.log("Í≤åÏûÑ ÎåÄÍ∏∞Î∞© / Í≤åÏûÑ ÎÇòÍ∞ÄÍ∏∞");
    } catch (error) {
      console.error("Í≤åÏûÑ ÎåÄÍ∏∞Î∞© / Í≤åÏûÑ ÎÇòÍ∞ÄÍ∏∞");
      setError("Í≤åÏûÑ ÎåÄÍ∏∞Î∞© / Í≤åÏûÑ ÎÇòÍ∞ÄÍ∏∞ Ï§ë Ïò§Î•ò Î∞úÏÉù");
    }
  }, [roomId, userId]);

  // Í≤åÏûÑ ÌîåÎ†àÏù¥ ÏÉùÏÑ±
  const createBurumabulPlay = useCallback(
    (playInfo) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        const formattedPlayInfo = {
          gamePlayId: playInfo.gamePlayId,
          players: playInfo.players,
          customId: playInfo.customId,
        };
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/game-plays/create`,
          body: JSON.stringify(formattedPlayInfo),
        });
        console.log("Í≤åÏûÑ ÌîåÎ†àÏù¥ ÏÉùÏÑ±Ïóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§.");
      } catch (error) {
        console.error("Í≤åÏûÑ ÌîåÎ†àÏù¥ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
        setError("Í≤åÏûÑ ÌîåÎ†àÏù¥ ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    },
    [roomId, userId]
  );

  // Ï£ºÏÇ¨ÏúÑ ÎçòÏ°åÎã§Îäî ÏïåÎ¶º
  const roll = useCallback((rollInfo) => {
    if (!stompClientRef.current?.connected) {
      console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
      return;
    }
    try {
      console.log("Ï£ºÏÇ¨ÏúÑÎ•º Íµ¥Î†∏Îã§Îäî ÏïåÎ¶º");
      console.log("Ï£ºÏÇ¨ÏúÑ Íµ¥Î†∏Îã§Îäî ÏïåÎ¶ºÏùò Ï†ïÎ≥¥:", rollInfo);
      stompClientRef.current.publish({
        destination: `app/game/blue-marble/game-plays/${roomId}/just-roll-dice`,
        body: JSON.stringify(rollInfo),
      });
      console.log("Ï£ºÏÇ¨ÏúÑÎ•º Íµ¥Î†∏Îã§Îäî ÏïåÎ¶º");
    } catch (error) {
      console.error("Ï£ºÏÇ¨ÏúÑ Íµ¥Î†∏Îã§Îäî ÏïåÎ¶º Ïã§Ìå®: ", error);
      setError("Ï£ºÏÇ¨ÏúÑ Íµ¥Î¶¨Í∏∞ ÏïåÎ¶ºÏóê Ïã§Ìå®Ìï®");
    }
  });

  // Î∂ÄÎ£®ÎßàÎ∂à Ï£ºÏÇ¨ÏúÑ Íµ¥Î¶¨Í∏∞
  const rollDice = useCallback(
    (diceResult) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        console.log("Ï£ºÏÇ¨ÏúÑ Íµ¥Î¶¨Í∏∞");
        console.log("ÏÜåÏºì Ï£ºÏÇ¨ÏúÑ Ï†ïÎ≥¥: ", diceResult);
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/game-plays/${roomId}/roll-dice`,
          body: JSON.stringify(diceResult),
        });
        console.log("Ï£ºÏÇ¨ÏúÑ Íµ¥Î¶¨Í∏∞Ïóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§.");
      } catch (error) {
        console.error("Ï£ºÏÇ¨ÏúÑ Íµ¥Î¶¨Í∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ", error);
        setError("Ï£ºÏÇ¨ÏúÑ Íµ¥Î¶¨Í∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    },
    [roomId, userId]
  );

  // Î∂ÄÎ£®ÎßàÎ∂à ÎïÖ Íµ¨Îß§
  const buyLand = useCallback(
    (buyInfo) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        console.log("ÎïÖ Íµ¨Îß§ Ï†ïÎ≥¥", buyInfo);
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/game-plays/${roomId}/buy-land`,
          body: JSON.stringify(buyInfo),
        });
        console.log("ÎïÖ Íµ¨Îß§Ïóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§.");
      } catch (error) {
        console.error("ÎïÖ Íµ¨Îß§Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", error);
        setError("ÎïÖ Íµ¨Îß§Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ");
      }
    },
    [roomId, userId]
  );

  // Í∏∞ÏßÄ ÏÉùÏÑ±
  const buildBase = useCallback(
    (buildInfo) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        console.log("Í∏∞ÏßÄ Í±¥ÏÑ§ Ï†ïÎ≥¥", buildInfo);
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/game-plays/${roomId}/build-base`,
          body: JSON.stringify(buildInfo),
        });
        console.log("Í∏∞ÏßÄ Í±¥ÏÑ§Ïóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§.");
      } catch (error) {
        console.error("Í∏∞ÏßÄ Í±¥ÏÑ§Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", error);
        setError("Í∏∞ÏßÄ Í±¥ÏÑ§Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    },
    [roomId, userId]
  );

  // ÌÑ¥ ÏãúÏûë
  const startTurn = useCallback(() => {
    if (!stompClientRef.current?.connected) {
      console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
      return;
    }
    try {
      console.log("ÌÑ¥ÏùÑ ÏãúÏûëÌï©ÎãàÎã§.");
      stompClientRef.current.publish({
        destination: `/app/game/blue-marble/game-plays/${roomId}/start-turn`,
      });
      console.log("ÌÑ¥ ÏãúÏûëÏóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§.");
    } catch (error) {
      console.error("ÌÑ¥ ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. :", error);
      setError("ÌÑ¥ ÏãúÏûëÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
    }
  }, [roomId, userId]);

  // ÌÜµÌñâÎ£å ÏßÄÎ∂à
  const payToll = useCallback(
    (payInfo) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        console.log("ÌÜµÌñâÎ£åÎ•º ÏßÄÎ∂àÌï©ÎãàÎã§.");
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/game-plays/${roomId}/pay-fee`,
          body: JSON.stringify(payInfo),
        });
        console.log("ÌÜµÌñâÎ£å ÏßÄÎ∂àÏóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§.");
      } catch (error) {
        console.error("ÌÜµÌñâÎ£å ÏßÄÎ∂àÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", error);
        setError("ÌÜµÌñâÎ£å ÏßÄÎ∂àÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    },
    [roomId, userId]
  );

  // Ïπ¥Îìú ÎΩëÍ∏∞
  const drawCard = useCallback(
    (drawInfo) => {
      if (!stompClientRef.current?.connected) {
        console.error("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        console.log("Ïπ¥ÎìúÎ•º ÎΩëÏäµÎãàÎã§.");
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/game-plays/${roomId}/draw-card`,
          body: JSON.stringify(drawInfo),
        });
        console.log("Ïπ¥Îìú ÎΩëÍ∏∞Ïóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§. ");
      } catch (error) {
        console.error("Ïπ¥Îìú ÎΩëÍ∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. :", error);
        setError("Ïπ¥Îìú ÎΩëÍ∏∞Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§. ");
      }
    },
    [roomId, userId]
  );

  const choosePosition = useCallback(
    (chooseInfo) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        console.log("ÏãúÍ∞Ñ Ïó¨Ìñâ Í∞ÄÍ≥†Ïã∂ÏùÄ Í≥≥ÏùÑ Î≥¥ÎÇºÍ±∞ÏòàÏöî");
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/game-plays/${roomId}/choose-position`,
          body: JSON.stringify(chooseInfo),
        });
        console.log("ÏãúÍ∞Ñ Ïó¨Ìñâ Í∞ÄÍ≥†Ïã∂ÏùÄ Í≥≥ÏùÑ Í≥®ÎûêÏäµÎãàÎã§.");
      } catch (error) {
        console.error("ÏãúÍ∞Ñ Ïó¨Ìñâ Í∞ÄÍ≥†Ïã∂ÏùÄ Í≥≥ÏùÑ Í≥†Î•¥Îäî Í≤ÉÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
        setError("ÏãúÍ∞Ñ Ïó¨Ìñâ Í∞ÄÍ≥†Ïã∂ÏùÄ Í≥≥ÏùÑ Í≥†Î•¥Îäî Í≤ÉÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.");
      }
    },
    [roomId, userId]
  );

  // ÌÑ¥ Ï¢ÖÎ£å Ï°∞Í±¥ ÌôïÏù∏
  const checkEnd = useCallback(
    (endInfo) => {
      if (!stompClientRef.current?.connected) {
        console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
        return;
      }
      try {
        console.log("Ï¢ÖÎ£åÏ°∞Í±¥ÏùÑ ÌôïÏù∏Ìï©ÎãàÎã§.");
        stompClientRef.current.publish({
          destination: `/app/game/blue-marble/game-plays/${roomId}/check-end`,
          body: JSON.stringify(endInfo),
        });
        console.log("Ï¢ÖÎ£åÏ°∞Í±¥ ÌôïÏù∏Ïóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§");
      } catch (error) {
        console.error("Ï¢ÖÎ£åÏ°∞Í±¥ ÌôïÏù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", error);
      }
    },
    [roomId, userId]
  );

  // Í≤åÏûÑ Ï¢ÖÎ£å -> Î∞© ÌååÍ¥¥
  const endGame = useCallback(() => {
    if (!stompClientRef.current?.connected) {
      console.warn("ÏõπÏÜåÏºìÏóê Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.");
      return;
    }
    try {
      console.log("Í≤åÏûÑÏùÑ Ï¢ÖÎ£åÌï©ÎãàÎã§.");
      stompClientRef.current.publish({
        destination: `/app/game/blue-marble/game-plays/${roomId}/game-end`,
      });
      console.log("Í≤åÏûÑ Ï¢ÖÎ£åÏóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§.");
    } catch (error) {
      console.error("Í≤åÏûÑ Ï¢ÖÎ£åÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.", error);
    }
  }, [roomId, userId]);

  if (!userId || !token) {
    return children;
  }
  if (
    userId &&
    (location.pathname === "/burumabul/room-list" ||
      location.pathname.match(/^\/game\/burumabul(\/[\w-]+)+$/))
  ) {
    return (
      <SocketContext.Provider
        value={{
          connected,
          error,
          socketBurumabulOpenVidu,
          roomSocketData,
          roomNotifi,
          setRoomNotifi,
          chatMessage,
          gamePlaySocketData,
          gameSocketNotifi,
          currentPlayerSocketIndex,
          rollDiceSocketData,
          buyLandSocketData,
          setBuyLandSocketData,
          roll,
          socketRoll,
          socketFirstDice,
          socketSecondDice,
          socketDouble,
          socketCurrentRound,
          socketBoard,
          socketCards,
          socketNext,
          setSocketNext,
          socketUserUpdate,
          socketTileUpdate,
          buildBaseSocketData,
          setBuildBaseSocketData,
          socketStatus,
          setSocketStatus,
          socketPayTollData,
          setSocketPayTollData,
          socketTollPrice,
          socketReceivedPlayer,
          socketDrawCardData,
          socketWinner,
          setSocketDrawCardData,
          socketPickedCard,
          socketDrawPrevPosition,
          setSocketDrawPrevPosition,
          socketDrawNextPosition,
          setSocketDrawNextPosition,
          socketDrawPrevBalance,
          setSocketDrawPrevBalance,
          socketDrawNextBalance,
          setSocketDrawNextBalance,
          socketTravelData,
          socketTravelPrevPosition,
          setSocketTravelPrevPosition,
          socketTravelNextPosition,
          setSocketTravelNextPosition,
          socketEnd,
          socketCustomList,
          enterWaitingRoom,
          chatWaitingRoom,
          changePassword,
          enterSecretWaitingRoom,
          leaveGame,
          buyLand,
          rollDice,
          createBurumabulPlay,
          updateWaitingRoom,
          buildBase,
          startTurn,
          payToll,
          checkEnd,
          drawCard,
          endGame,
          choosePosition,
        }}
      >
        {children}
      </SocketContext.Provider>
    );
  }
  return children;
};

export default SocketLayout;
